{"version":3,"file":"index.js","sources":["../../mitt/src/index.ts","../src/index.ts"],"sourcesContent":["\ninterface EventMmitter {\n    all: Map<string, Function[]>;\n    on: (type: string, handler: Function) => void;\n    off: (type: string, handler: Function) => void;\n    emit: (type: string, params: any) => void;\n    once: (type: string, handler: Function) => void;\n}\n\nclass EventMitt implements EventMmitter {\n    all: Map<string, Function[]>; // 存储所有事件类型以及对应的处理函数的Map，事件类型和处理函数的映射表\n    constructor(){\n        this.all = new Map();\n    }\n \n    // 注册事件处理函数\n    on(type: string, handler: Function) {\n        // 获取事件类型对应的处理函数列表\n        const handlers = this.all.get(type);\n        // 已有处理函数，将新的处理函数添加到处理函数列表中，没有则创建新的处理函数列表\n        if (handlers) {\n            handlers.push(handler);\n        }else{\n            this.all.set(type, [handler]);\n        }\n    }\n\n    // 移除事件处理函数\n    off(type: string, handler: Function) {\n        const handlers = this.all.get(type);\n        if(!handlers) return;\n        // 找到对应的处理函数，将其从处理函数列表中删除，否则将事件类型对应的处理函数列表设置为空\n        if(handler){\n            const index = handlers.indexOf(handler);\n            if(index !== -1){\n                handlers.splice(index, 1);\n            }\n        }else{\n            this.all.set(type, []);\n        }\n    }\n\n    // 触发事件\n    emit(type: string, params: any) {\n        let handlers = this.all.get(type);\n        if(handlers){\n            // 如果有处理函数，依次调用处理函数并传入参数\n            // 使用slice是为了创建一个数组的拷贝，避免影响原始数据\n            handlers.slice().map(handler => handler(params));\n        }\n        // 获取通配符事件类型对应的处理函数列表，如果存在，依次调用处理函数并传入参数\n        handlers = this.all.get('*');\n        if(handlers){\n            handlers.slice().map(handler => handler(params));\n        }\n    } \n    \n    // 注册事件处理函数，只触发一次\n    once(type: string, handler: Function) {\n        const fn = (...args: any[]) => {\n            handler(...args);\n            this.off(type, fn);\n        };\n        this.on(type, fn);\n    }\n}\n\nexport default EventMitt","import { sum } from \"@catdoll/pkg1\";\nimport EventEmitter from \"@catdoll/mitt\";\n\n\nconsole.log(sum(1, 2));\n\nconst emitter = new EventEmitter();\n\nfunction demoFn(count: number) {\n    console.log(\"demoFn\", count);\n}\n\nemitter.on(\"demoFn\", demoFn )\n\ndemoFn(1)\ndemoFn(2)\n\nemitter.off(\"demoFn\", demoFn)\n\ndemoFn(3)"],"names":["EventMitt","this","all","Map","prototype","on","type","handler","handlers","get","push","set","off","index","indexOf","splice","emit","params","slice","map","once","_this","fn","args","_i","arguments","length","apply","console","log","emitter","EventEmitter","demoFn","count"],"mappings":"AASA,IAAAA,EAAA,WAEI,SAAAA,IACIC,KAAKC,IAAM,IAAIC,GAClB,CAoDL,OAjDIH,EAAAI,UAAAC,GAAA,SAAGC,EAAcC,GAEb,IAAMC,EAAWP,KAAKC,IAAIO,IAAIH,GAE1BE,EACAA,EAASE,KAAKH,GAEdN,KAAKC,IAAIS,IAAIL,EAAM,CAACC,KAK5BP,EAAAI,UAAAQ,IAAA,SAAIN,EAAcC,GACd,IAAMC,EAAWP,KAAKC,IAAIO,IAAIH,GAC9B,GAAIE,EAEJ,GAAGD,EAAQ,CACP,IAAMM,EAAQL,EAASM,QAAQP,IACjB,IAAXM,GACCL,EAASO,OAAOF,EAAO,EAE9B,MACGZ,KAAKC,IAAIS,IAAIL,EAAM,KAK3BN,EAAAI,UAAAY,KAAA,SAAKV,EAAcW,GACf,IAAIT,EAAWP,KAAKC,IAAIO,IAAIH,GACzBE,GAGCA,EAASU,QAAQC,KAAI,SAAAZ,GAAW,OAAAA,EAAQU,EAAR,KAGpCT,EAAWP,KAAKC,IAAIO,IAAI,OAEpBD,EAASU,QAAQC,KAAI,SAAAZ,GAAW,OAAAA,EAAQU,EAAR,KAKxCjB,EAAAI,UAAAgB,KAAA,SAAKd,EAAcC,GAAnB,IAMCc,EAAApB,KALSqB,EAAK,eAAC,IAAcC,EAAA,GAAAC,EAAA,EAAdA,EAAcC,UAAAC,OAAdF,IAAAD,EAAcC,GAAAC,UAAAD,GACtBjB,EAAOoB,WAAA,EAAIJ,GACXF,EAAKT,IAAIN,EAAMgB,EACnB,EACArB,KAAKI,GAAGC,EAAMgB,IAErBtB,CAAD,IC7DA4B,QAAQC,IAAQ,EAAG,GAEnB,IAAMC,EAAU,IAAIC,EAEpB,SAASC,EAAOC,GACZL,QAAQC,IAAI,SAAUI,EAC1B,CAEAH,EAAQzB,GAAG,SAAU2B,GAErBA,EAAO,GACPA,EAAO,GAEPF,EAAQlB,IAAI,SAAUoB,GAEtBA,EAAO"}